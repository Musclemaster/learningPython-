
 #Do it 점프 투 파이썬 내용 정리하기

#02장 파이썬 프로그래밍의 기초, 자료형

#02-1 숫자형: 숫자 형태로 이루어진 자료형

#정수: 123, -123, 0
#실수: -123.45, -1234.5, 3.4e10
#복소수: 1+ 2j, -3j
#8진수: 0o34, 0o25 -> 숫자0과 소문자o
#16진수: 0x2A, oxFF -> 숫자0과 소문자x

a = 123
a = -178
a = 0

a = 1.2
a = -3.45
a = 4.23e10
a = 4.23e-10

a = 0o177
a = 0x8ff
b = 0xABC

a = 1+2j
b = 3-4J

# 복소수.real은 복소수의 실수 부분을 리턴한다.
a = 1+2j
a.real
1.0

#복소수.imag는 복소수의 허수 부분을 리턴한다.
a = 1+2j
a.imag
2.0

#복소수.conjugate()
a = 1+2j
a.conjugate()
(1-2j)

#abs(복소수)는 복소수의 절대값을 리턴한다.
a = 1+2j
abs(a)
2.2360679774997898

>>> a = 3
>>> b = 4
>>> a + b
7

>>> a * b
12
>>> a/b
0.75

 # x의 y제곱을 나타내는 **연산자
>>> a = 3
>>> b = 4
>>> a ** b
81

>>> #나눗셈 후 나머지를 반환하는 % 연산자
>>>7 % 3
SyntaxError: invalid syntax
>>> 7 % 3
1
>>> 3 % 7
3
>>> # 나눗셈 후 소수점 아렛자리를 버리는 // 연산자
>>> 7 / 4
1.75
>>> 7 // 4
1
>>> # 문자열 자료형
>>> "Life is too short, You need Python"
'Life is too short, You need Python'
>>> "a"
'a'
>>> "123"
'123'
>>> # 큰따옴표("")로 양쪽 둘러싸기
>>> "Hello World"
'Hello World'
>>> # 작은따옴표('')로 양쪽 둘러싸기
>>> 'Hello World'
'Hello World'
>>> # 이유: 문자열에 작은따옴표(')포함시키기
>>> food = "Python's favorite food is perl"
>>> food
"Python's favorite food is perl"
>>> # 2. 문자열에 큰따옴표(") 포함시키기
'"Python is very easy." he says.'
# 여러 줄인 문자열을 변수에 대입하고 싶을 때
>>> multiline='''
(4 들여쓰기)
    Life is too short
    you need python
    '''
>>> print(multiline) -># ''' 혹은 """ 지정

 Life is too short
    you need python

multiline = "Life is too short\nYou need python"
>>> print(multiline) -> # \n 을 삽입한다.

Life is too short
You need python

>>> # 문자열 연산하기
>>> # 1. 문자열 더해서 연결하기
>>> head = "Python"
>>> tail = "is fun!"
>>> head + tail
'Pythonis fun!'
>>> # 2. 문자열 곱하기
>>> a = "python"
>>> a * 2
'pythonpython'

>>> print("=" * 50)
==================================================
>>> print("My program")
My program
>>> print("=" * 50)
==================================================
>>> # 상단에 제목 표시하기

>>> # 인덱싱(indexing) 가리킨다, 슬라이싱(Slicing) 잘라낸다.
>>> a = "Life is too short, You need Python"
>>> # 파이썬은 0부터 숫자를 세고, -1은 거꾸로
>>> #문자열 인덱싱 활용하기
>>> a[0]
'L'
>>> a[12]
's'
>>> a[-1]
'n''
>>> a[-2]
'o'
>>> a[-5]
'y'
>>> # 문자열 슬라이싱
>>> a = "Life is too short, You need Python"
>>> b = a[0] + a[1] + a[2] + a[3]
>>> b
'Life'
>>> # 하지만 더 단순하게 갈 수 있다.
>>> a = "Life is too short, You need Python"
>>> a[0:4]
'Life'
# !! 왜 0:3이 아닐까? [시작번호 : 끝번호] 끝 번호에 해당되는 것은 포함X
>>> a[0:5]
'Life '
>>> a[0:2]
'Li'
>>> a[5:7]
'is'
>>> a[12:17]
'short'
>>> a[19:]
'You need Python'
>>> a[:17]
'Life is too short'
>>> a[:]
'Life is too short, You need Python'
>>> a[19:-7]
'You need'
# a[19:-7]이 뜻하는 것은 a[19]에서부터 a[-8]까지를 말한다.

>>> # 슬라이싱으로 문자열 나누기
>>> a = "20010331Rainy"
>>> date = a[:8]
>>> weather = a[8:]
>>> date
'20010331'
>>> weather
'Rainy'
>>> year = a[:4] <- # 처음부터 a[3] 까지
>>> day = a[4:8] <- # a[4]부터 a[7] 까지
>>> weather = a[8:] <- # a[8]부터 마지막 까지
>>> year
'2001'
>>> day
'0331'
>>> weather
'Rainy'

>>> # 문자열 바꾸기
>>> a = "Pithon"
>>> a[:1]
'P'
>>> a[2:]
'thon'
>>> a[:1] + 'y' + a[2:]
'Python'

>>> # 문자열 포메팅 : 문자열 내의 특정한 값을 바꿔야 할 경우가 있을 때
>>> "I eat %d apples." % 3
'I eat 3 apples.'
>>> # 문자열 안에서 숫자를 넣고 싶은 자리에 %d라는 문자를 넣고, % 뒤에 넣고 싶은 숫자.
>>> # 문자열 바로 대입 %s, % 뒤에 "문자"
>>> "I eat %s apples." % "five"
'I eat five apples.'
>>> # 숫자 값을 나타내는 변수로 대입
>>> number = 3
>>> "I eat %d apples." % number
'I eat 3 apples.'
>>> # 2개 이상의 값 넣기
>>> number = 10
>>> day = "three"
>>> "I ate %d apples. so I was sick for %s days." % (number, day)
'I ate 10 apples. so I was sick for three days.'

>>> # % 퍼센트를 나타낼 때 d 뒤에 %% 2번!
>>> "Error is %d%%." % 98
'Error is 98%.'

>>> # 포맷 코드와 숫자 함께 사용하기
>>> # 1. 정렬과 공백
>>> "%10s" % "hi" <- # "%10"의미는 전체 길이가 10개인 문자열 공간에서 hi를 오른쪽으로, 나머진 공백
'        hi'
>>> "%-10sjane." % 'hi'
'hi        jane.'

>>> # 2. 소수점 표현하기
>>> "%0.4f" % 3.42134234 <- # 소수점 4자리 뒤 날라감.
'3.4213'
>>> "%10.4f" % 3.42134234 <- # "%10" 은 공백을 만들어주는구나.
'    3.4213'

>>> # 문자열 관련 함수들

>>> # 문자 개수 세기(count)
>>> a = "hobby"
>>> a.count('b')
2

>>> # 위치 알려주기1(find)
>>> a = "Python is best choice"
>>> a.find('b')
10
>>> a.find('k') <- # 존재 하지않으면 -1
-1

>>> # 위치 알려주기 2 (index)
>>> a = "Life is too short"
>>> a.index('t')
8
>>> a.index('k') <- # 존재 하지 않으면 에러문
Traceback (most recent call last):
  File "<pyshell#136>", line 1, in <module>
    a.index('k')
ValueError: substring not found
>>> # 문자열 삽입(join)
>>> a = ","
>>> a.join('abcd')
'a,b,c,d'

>>> # 소문자를 대문자로 바꾸기(upper)
>>> a = "hi"
>>> a.upper()
'HI'
>>> # 대문자를 소문자로 바꾸기(lower)
>>> a = "HI"
>>> a.lower()
'hi'

>>> # 왼쪽 공백 지우기(lstrip)
>>> a = " hi "
>>> a.lstrip()
'hi '
>>> # 오른쪽 공백 지우기(rstrip)
>>> a = " hi "
>>> a.rstrip()
' hi'
>>> # 양쪽 공백 지우기(strip)
>>> a = " hi "
>>> a.strip()
'hi'

>>> # 문자열 바꾸기(replace) replace(바뀌게 될 문자열, 바꿀 문자열)
>>> a = "Life is too short"
>>> a.replace("Life", "Your leg")
'Your leg is too short'

>>> # 문자열 나누기(split)
>>> a = "Life is too short"
>>> a.split() <- # 공백을 기준으로 문자열 나눔
['Life', 'is', 'too', 'short']
>>> a = "a:b:c:d"
>>> a.split(':') <- # : 기호를 기준으로 문자열 나눔
['a', 'b', 'c', 'd']


>>> # 02-3 리스트 자료형
>>> # 리스트를 이용하면 홀수, 짝수 등을 간단하게 표현가능.
>>> odd = [1,3,5,7,9]
>>> odd
[1, 3, 5, 7, 9]
>>> # 리스트의 여러가지 생김새 # 리스트 안에는 어떠한 자료형도 포함시킬 수 있다.
>>> a = []
>>> b = [1,2,3]
>>> c = ['Life', 'is', 'too', 'short']
>>> d = [1, 2, 'Life', 'is']
>>> e = [1, 2, ['Life', 'is']]

>>> # 리스트의 인덱싱과 슬라이싱
>>> a = [1,2,3]
>>> a
[1, 2, 3]
>>> a[0]
1
>>> a[0] + a[2]
4
>>> a[-1]
3
>>> a = [1, 2, 3, ['a', 'b', 'c']]
>>> a[0]
1
>>> a[-1]
['a', 'b', 'c']
>>> a[3]
['a', 'b', 'c']
>>> a[-1][0]
'a'
>>> a[-1][1]
'b'
>>> a[-1][2]
'c'

>>> # 리스트의 슬라이싱 # 슬라이싱 나눈다
>>> a = [1, 2, 3, 4, 5]
>>> a[0:2]
[1, 2]
>>> a = [1, 2, 3, 4, 5]
>>> b = a[:2] <- # 처음부터 a1까지
>>> c = a[2:] <- # a[2]부터 마지막까지
>>> b
[1, 2]
>>> c
[3, 4, 5]

>>> # 중첩된 리스트에서 슬라이싱하기
>>> a = [1, 2, 3, ['a', 'b', 'c'], 4, 5]
>>> a[2:5]
[3, ['a', 'b', 'c'], 4]
>>> a[3][:2]
['a', 'b']


>>> # 리스트 연산자
>>> # 1. 리스트 더하기(+)
>>> a = [1, 2, 3]
>>> b = [4, 5, 6]
>>> a + b
[1, 2, 3, 4, 5, 6]
>>> # 2. 리스트 반복하기(*)
>>> a = [1, 2, 3]
>>> a * 3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
>>> # 정수와 문자열은 서로 더할 수 없어. 정수를 문자로 바꿔
>>> a = [1, 2, 3]
>>> str(a[2]) + "hi"
'3hi'

>>> # 2. 리스트에서 연속된 범위의 값 수정하기
>>> a[1:2]
[2]
>>> a[1:2] = ['a', 'b', 'c']
>>> a
[1, 'a', 'b', 'c', 4]

>>> # [] 사용해 리스트 요소 삭제하기
>>> a[1:3] = []
>>> a
[1, 'c', 4]
>>> # 4. del 함수 사용해 리스트 요소 삭제하기
>>> a
[1, 'c', 4]
>>> del a[1]
>>> a
[1, 4]

>>> # 리스트 관련 함수들
>>> # 리스트에 요소 추가(append) 
>>> a = [1, 2, 3]
>>> a.append(4) # 리스트의 맨 마지막에 4를 추가
>>> a
[1, 2, 3, 4]
>>> a.append([5,6]) # 리스트의 맨 마지막에 [5, 6]을 추가
>>> a
[1, 2, 3, 4, [5, 6]]

>>> # 리스트의 정렬(sort)
>>> a = [1, 4, 3, 2]
>>> a.sort()
>>> a
[1, 2, 3, 4]
>>> a = ['a', 'c', 'b']
>>> a.sort()
>>> a
['a', 'b', 'c']

>>> # 리스트 뒤집기(reverse)
>>> a = ['a', 'c', 'b']
>>> a.reverse()
>>> a
['b', 'c', 'a']

>>> # 위치 반환(index)
>>> a = [1,2,3]
>>> a.index(3) <- # 3은 리스트 a의 세 번째(a[2]) 요소
2
>>> a.index(1) <- # 1은 리스트 a의 첫 번째(a[0]) 요소
0

>>> # 리스트에 요소 삽입(insert)
>>> a = [1, 2, 3]
>>> a.insert(0,4)
>>> a
[4, 1, 2, 3]
>>> a.insert(3, 5)
>>> a
[4, 1, 2, 5, 3]

>>> # 리스트 요소 제거(remove)
>>> a = [1, 2, 3, 1, 2, 3]
>>> a.remove(3)
>>> a
[1, 2, 1, 2, 3]
>>> a.remove(3)
>>> a
[1, 2, 1, 2]

>>> # 리스트 요소 끄집어내기(pop)
>>> a = [1,2,3]
>>> a.pop() # pop()은 리스트의 맨 마지막 요소를 주고 삭제하는 함수
3
>>> a
[1, 2]
>>> a = [1,2,3]
>>> a.pop(1)
2
>>> a
[1, 3]

>>> # 리스트에 포함된 요소 x의 개수 세기(count)
>>> a = [1,2,3,1]
>>> a.count(1) # count(x) 음..x가 몇개있는지 조사할게.
2

>>> # 리스트 확장(extend)
>>> a = [1,2,3]
>>> a.extend([4,5])
>>> a
[1, 2, 3, 4, 5]
>>> b = [6,7]
>>> a.extend(b)
>>> a
[1, 2, 3, 4, 5, 6, 7]

>>> # 튜플 자료형
>>> # () , 리스트는 그 값의 생성, 삭제, 수정이 가능하지만 튜플은 그 값을 바꿀 수 없다.
>>> t1 = ()
>>> t2 = (1,) # 단지 1개의 요소만 가질 때는 요소 뒤에 콤마,를 반드시
>>> t3 = (1,2,3)
>>> t4 = 1,2,3 # 괄호()를 생략해도 무방
>>> t5 = ('a', 'b', ('ab', 'cd'))
# 리스트 항목값 변화!! # 튜플 항목값 고정!!

>>> # 튜플 지우기, 변경 제외하고 인덱싱과 슬라이싱, 더하기 와 곱하기 보자
>>> # 1. 인덱싱하기
>>> t1 = (1,2,'a','b')
>>> t1[0]
1
>>> t1[3]
'b'
>>> # 2. 슬라이싱하기
	  
>>> t1 = (1,2,'a','b')
	  
>>> t1[1:]
	  
(2, 'a', 'b')
>>> # 3. 튜플 더하기
	  
>>> t2 = (3,4)
	  
>>> t1 + t2
	  
(1, 2, 'a', 'b', 3, 4)
>>> # 4. 튜플 곱하기
	  
>>> t2 * 3
	  
(3, 4, 3, 4, 3, 4)

>>> # 02-5 딕셔너리 자료형
	  
>>> # Key 와 Value라는 것을 한 쌍
	  
>>> # { }  Key : Value  쉼표(,)

>>> dic = {'name':'pey', 'phone':'0119993323', 'birth':'1118'}
	   
>>> a = {1: 'hi'}
	   
>>> a = {'a':[1,2,3]}

>>> # 딕셔너리 쌍 추가, 삭제하기
	   
>>> # 1. 딕셔너리 쌍 추가하기 ! 딕셔너리는 순서를 따지지 않는다.
	   
>>> a = {1:'a'}
	   
>>> a[2] = 'b'
	   
>>> a
	   
{1: 'a', 2: 'b'}

>>> a['name'] = 'pey'

>>> a
{1: 'a', 2: 'b', 'name': 'pey'} # 순서는 랜덤!

>>> a[3] = [1,2,3]
>>> a
{1: 'a', 2: 'b', 'name': 'pey', 3: [1, 2, 3]}

>>> # 딕셔너리 요소 삭제하기
>>> del a[1] <- # key가 1인 key:value쌍 삭제
>>> a
{2: 'b', 'name': 'pey', 3: [1, 2, 3]}

>>> # 딕셔너리에서 Key 사용해 Value 얻기
>>> grade = {'pey':10, 'julliet':99}
>>> grade['pey'] <- # Key가 'pey'인 딕셔너리의 Value를 반환
	  
10
>>> grade['julliet'] <- # Key가 'julliet'인 딕셔너리의 Value를 반환
	  
99

>>> a = {1:'a', 2:'b'}
	  
>>> a[1] <- # Key가 1인 요소의 Value를 반환
	  
'a'
>>> a[2] <- # Key가 2인 요소의 Value를 반환

# 딕셔너리 주의점! KEY가 중복되면 랜덤으로 하나는 "무시" 된다!
# 딕셔너리 주의점! 리스트[] 안돼! 튜플()은 KET로 가능!
# 다시 한번, 리스트는 변화무쌍, 튜플은 고정  

>>> # 딕셔너리 관련 함수들
	  
>>> # KEY 리스트 만들기(keys)

>>> a = {'name':'pey', 'phone':'0119993323', 'birth':'1118'}
>>> a.keys()
dict_keys(['name', 'phone', 'birth'])

>>> for k in a.keys():
	  print(k)
 
name
phone
birth

>>> # Value 리스트 만들기(valuse)
	  
>>> a.values()
	  
dict_values(['pey', '0119993323', '1118'])

>>> # Key, Value 쌍 얻기(items)
	  
>>> a.items()
	  
dict_items([('name', 'pey'), ('phone', '0119993323'), ('birth', '1118')])

>>> # Key:Value 쌍 모두 지우기(clear)
	  
>>> a.clear()
	  
>>> a
	  
{}

>>> # Key로 Value얻기(get)
	  
>>> a={'name':'pey', 'phone':'0119993323','birth':'1118'}
	  
>>> a.get('name')
	  
'pey'
>>> a.get('phone')
	  
'0119993323'

# 찾으려는 KEY 값이 없을 경우, 미리 정해 둔 디폴트값을 대신 가져오게 함. get(x, '디폴트값')
>>> a.get('foo', 'bar')
      
'bar'

>>> # 해당 KEY가 딕셔너리 안에 있는지 조사하기(in)
      
>>> a = {'name':'pey', 'phone':'0119993323', 'birth':'1118'}
      
>>> 'name' in a
      
True
>>> 'email' in a
      
False

>>> # 02-6 집합 자료형
      
>>> # 만드는 방법
      
>>> s1 = set([1,2,3]) #set()안에 [] 리스트 입력
      
>>> s1
      
{1, 2, 3}
>>> s2 = set("Hello") #set()안에 ''문자열 입력
      
>>> s2
      
{'l', 'e', 'H', 'o'} # 엇! 집합 자료형의 특징은 중복을 허용하지 않고, 순서가 없어!

# set 자료형과 딕셔너리는 순서가 없어서 인덱싱으로 값 못 얻어!!!
# 튜플과 리스트는 순서있어 ㅎㅎ 그래서 바꿔줘야해.

# 인덱싱으로 값 얻기 위해 바꿔주자
      
>>> s1 = set([1,2,3])
>>> l1 = list(s1)
      
>>> l1
      
[1, 2, 3]
>>> l1[0]
      
1
>>> t1 = tuple(s1)
      
>>> t1
      
(1, 2, 3)
>>> t1[0]

>>> # 집합 자료형 활용하는 방법
      
>>> # 교집합, 합집합, 차집합 구하기
      
>>> s1 = set([1, 2, 3, 4, 5, 6])
      
>>> s2 = set([4, 5, 6, 7, 8, 9])
      
>>> # 교집합 &
      
>>> s1 & s2
      
{4, 5, 6}
      
>>> # 합집합
      
>>> s1 | s2
      
{1, 2, 3, 4, 5, 6, 7, 8, 9}

>>> # 차집합
      
>>> s1 - s2
      
{1, 2, 3}
>>> s2 - s1
      
{8, 9, 7}
      
>>> # 집합 자료형 관련 함수들
      
>>> # 값 1개 추가하기(add)
      
>>> s1 = set([1,2,3])
      
>>> s1.add(4)
      
>>> s1
      
{1, 2, 3, 4}

>>> # 값 여러 개 추가하기(update)
      
>>> s1 = set([1, 2, 3])
      
>>> s1.update([4, 5, 6])
      
>>> s1
      
{1, 2, 3, 4, 5, 6}

>>> # 특정 값 제거하기(remove)
      
>>> s1 = set([1, 2, 3])
      
>>> s1.remove(2)
      
>>> s1
      
{1, 3}

>>> # 02-7 자료형의 참과 거짓
      
>>> a = [1, 2, 3, 4]
      
>>> while a:  <- # a가 참인 동안
      a.pop() <- # 리스트의 마지막 요소를 하나씩 꺼낸다.

      
4
3
2
1

>>> # 02-8 자료형의 값을 저장하는 공간, 변수
      
>>> a = 1 # 1은 정수형 객체이다.
      
>>> b = "python"
      
>>> c = [1,2,3]
      
>>> # 변수를 만들 때는 = 를 사용

>>> a = 3
      
>>> b = 3
      
>>> a is b
      
True

# 입력한 자료형에 대한 참조개수를 알고 싶어
>>> import sys
      
>>> sys.getrefcount(3)
      
157
>>> a = 3
      
>>> sys.getrefcount(3)
      
157
>>> f = 3
      
>>> sys.getrefcount(3)
      
158

>>> # 변수를 만드는 여러 가지 방법
      
>>> a, b = ('python', 'life')
      
>>> (a, b) = 'python', 'life' # 튜플 () 생략가능
      
>>> [a,b] = ['python', 'life']
      
>>> a = b = 'python'
      
>>> a = 3
      
>>> b = 5
      
>>> a,b = b,a
      
>>> a
      
5
>>> b
      
3
 
      
>>> # 메모리에 생성된 변수 없애기
      
>>> a = 3
      
>>> b = 3
      
>>> del(a)
      
>>> del(b)
      

      
>>> # 리스트를 변수에 넣고 복사하고자 할 때
      
>>> a = [1,2,3]
      
>>> b = a
      
>>> a[1] = 4
      
>>> a
      
[1, 4, 3]
>>> b
      
[1, 4, 3]

>>> # a와 같은 값을 가지도록 복사 그러나 a가 가르키는 리스트와 다르게하기!
      
>>> a = [1, 2, 3]
      
>>> b = a[:] # 1. [:] 이용하기 * 더 간단해 보인다.
      
>>> a[1] = 4
      
>>> a
      
[1, 4, 3]
>>> b
      
[1, 2, 3]

>>> from copy import copy # from copy import copy
      
>>> b
      
[1, 2, 3]
>>> b is a
      
False
